// Generated by Haxe 4.0.0-preview.5+7eb789f
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var ecs_Component = function() { };
var nengine_components_Transformable = function() { };
var nengine_components_Transform2D = function(x,y,rotation,scaleX,scaleY) {
	this.parent = null;
	this.name = "Transform2D";
	var this1 = new nengine_math_Vec2Data(x != null ? x : 0,y != null ? y : 0);
	this.local.position = this1;
	this.local.rotation = rotation != null ? rotation : 0;
	var this2 = new nengine_math_Vec2Data(scaleX != null ? scaleX : 1,scaleY != null ? scaleY : 1);
	this.local.scale = this2;
};
nengine_components_Transform2D.__interfaces__ = [nengine_components_Transformable,ecs_Component];
nengine_components_Transform2D.prototype = {
	get_global: function() {
		if(this.parent != null) {
			var v1 = this.local.position;
			var v2 = this.parent.get_global().position;
			var this1 = new nengine_math_Vec2Data(v1.x + v2.x,v1.y + v2.y);
			var tmp = this.local.rotation + this.parent.get_global().rotation;
			var this2 = new nengine_math_Vec2Data(this.local.scale.x * this.parent.get_global().scale.x,this.local.scale.y * this.parent.get_global().scale.y);
			return { position : this1, rotation : tmp, scale : this2};
		} else {
			return this.local;
		}
	}
	,set_global: function(transform) {
		var tmp;
		if(this.parent != null) {
			var v1 = transform.position;
			var v2 = this.parent.get_global().position;
			var this1 = new nengine_math_Vec2Data(v1.x - v2.x,v1.y - v2.y);
			var tmp1 = transform.rotation - this.parent.get_global().rotation;
			var this2 = new nengine_math_Vec2Data(this.parent.get_global().scale.x != 0 ? transform.scale.x / this.parent.get_global().scale.x : 0,this.parent.get_global().scale.y != 0 ? transform.scale.y / this.parent.get_global().scale.y : 0);
			tmp = { position : this1, rotation : tmp1, scale : this2};
		} else {
			tmp = transform;
		}
		return this.local = tmp;
	}
};
var nengine_math__$Vec2_Vec2_$Impl_$ = {};
nengine_math__$Vec2_Vec2_$Impl_$._new = function(x,y) {
	var this1 = new nengine_math_Vec2Data(x,y);
	return this1;
};
nengine_math__$Vec2_Vec2_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
nengine_math__$Vec2_Vec2_$Impl_$.normalize = function(this1) {
	var l = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	var this2 = new nengine_math_Vec2Data(this1.x / l,this1.y / l);
	return this2;
};
nengine_math__$Vec2_Vec2_$Impl_$.minus = function(v) {
	var this1 = new nengine_math_Vec2Data(-v.x,-v.y);
	return this1;
};
nengine_math__$Vec2_Vec2_$Impl_$.add = function(v1,v2) {
	var this1 = new nengine_math_Vec2Data(v1.x + v2.x,v1.y + v2.y);
	return this1;
};
nengine_math__$Vec2_Vec2_$Impl_$.sub = function(v1,v2) {
	var this1 = new nengine_math_Vec2Data(v1.x - v2.x,v1.y - v2.y);
	return this1;
};
nengine_math__$Vec2_Vec2_$Impl_$.equals = function(v1,v2) {
	if(v1.x == v2.x) {
		return v1.y == v2.y;
	} else {
		return false;
	}
};
nengine_math__$Vec2_Vec2_$Impl_$.dot = function(this1,v) {
	return this1.x * v.x + this1.y * v.y;
};
nengine_math__$Vec2_Vec2_$Impl_$.cross = function(this1,v) {
	return this1.x * v.y - this1.y * v.x;
};
var nengine_math_Vec2Data = function(x,y) {
	this.x = x;
	this.y = y;
};
nengine_math_Vec2Data.prototype = {
	iterator: function() {
		return HxOverrides.iter([this.x,this.y]);
	}
};
})();
